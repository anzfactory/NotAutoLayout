{% set hElements "Left,Center,Right"|split:"," %}
{% set vElements "Top,Middle,Bottom"|split:"," %}
{% set lElements "Width,Height"|split:"," %}

extension IndividualProperty {

{# 0-element Property #}
// MARK: - 0-element Property -

    public struct Initial {

    }

{# 1-element Property #}
// MARK: - 1-element Property -
{# Horizontal #}
// MARK: - Horizontal
{% for element in hElements %}

    public struct {{ element }} {

        let {{ element|lowerFirstLetter }}: LayoutElement.Horizontal

    }

{% endfor %}

{# Vertical #}
// MARK: - Vertical
{% for element in vElements %}

    public struct {{ element }} {

        let {{ element|lowerFirstLetter }}: LayoutElement.Vertical

    }

{% endfor %}

{# Length #}
// MARK: - Length
{% for element in lElements %}

    public struct {{ element }} {

        let {{ element|lowerFirstLetter }}: LayoutElement.Vertical

    }

{% endfor %}

{# 2-element Property #}
// MARK: - 2-element Property -
{# HorizontalHorizontal #}
// MARK: - HorizontalHorizontal
{% for i in 0...hElements.count %}
{% for j in i...hElements.count %}
{% if i < hElements.count and j < hElements.count and j > i %}
{% set element1 %}{{ hElements[i] }}{% endset %}
{% set element2 %}{{ hElements[j] }}{% endset %}

    public struct {{ element1 }}{{ element2 }} {

        let {{ element1|lowerFirstLetter }}: LayoutElement.Horizontal
        let {{ element2|lowerFirstLetter }}: LayoutElement.Horizontal

    }

{% endif %}
{% endfor %}
{% endfor %}

{# HorizontalLength #}
// MARK: - HorizontalLength
{% for i in 0...hElements.count %}
{% for j in 0...lElements.count %}
{% if i < hElements.count and j < lElements.count %}
{% set element1 %}{{ hElements[i] }}{% endset %}
{% set element2 %}{{ lElements[j] }}{% endset %}

    public struct {{ element1 }}{{ element2 }} {

        let {{ element1|lowerFirstLetter }}: LayoutElement.Horizontal
        let {{ element2|lowerFirstLetter }}: LayoutElement.Horizontal

    }

{% endif %}
{% endfor %}
{% endfor %}

{# VerticalVertical #}
// MARK: - VerticalVertical
{% for i in 0...vElements.count %}
{% for j in i...vElements.count %}
{% if i < vElements.count and j < vElements.count and j > i %}
{% set element1 %}{{ vElements[i] }}{% endset %}
{% set element2 %}{{ vElements[j] }}{% endset %}

    public struct {{ element1 }}{{ element2 }} {

        let {{ element1|lowerFirstLetter }}: LayoutElement.Vertical
        let {{ element2|lowerFirstLetter }}: LayoutElement.Vertical

    }

{% endif %}
{% endfor %}
{% endfor %}

{# VerticalLength #}
// MARK: - VerticalLength
{% for i in 0...vElements.count %}
{% for j in 0...lElements.count %}
{% if i < vElements.count and j < lElements.count %}
{% set element1 %}{{ vElements[i] }}{% endset %}
{% set element2 %}{{ lElements[j] }}{% endset %}

    public struct {{ element1 }}{{ element2 }} {

        let {{ element1|lowerFirstLetter }}: LayoutElement.Horizontal
        let {{ element2|lowerFirstLetter }}: LayoutElement.Vertical

    }

{% endif %}
{% endfor %}
{% endfor %}

{# HorizontalVertical #}
// MARK: - HorizontalVertical
{% for i in 0...hElements.count %}
{% for j in 0...vElements.count %}
{% if i < hElements.count and j < vElements.count %}
{% set element1 %}{{ hElements[i] }}{% endset %}
{% set element2 %}{{ vElements[j] }}{% endset %}

    public struct {{ element1 }}{{ element2 }} {

        let {{ element1|lowerFirstLetter }}: LayoutElement.Horizontal
        let {{ element2|lowerFirstLetter }}: LayoutElement.Vertical

    }

{% endif %}
{% endfor %}
{% endfor %}

{# VerticalHorizontal (Point) #}
// MARK: - VerticalHorizontal (Point)
{% for i in 0...vElements.count %}
{% for j in 0...hElements.count %}
{% if i < vElements.count and j < hElements.count %}
{% set element %}{{ vElements[i] }}{{hElements[j] }}{% endset %}

    public struct {{ element }} {

        let {{ element|lowerFirstLetter }}: LayoutElement.Point

    }

{% endif %}
{% endfor %}
{% endfor %}

{# WidthHeight #}
// MARK: - WidthHeight
{% for i in 0...lElements.count %}
{% for j in i...lElements.count %}
{% if i < lElements.count and j < lElements.count and j > i %}
{% set element1 %}{{ lElements[i] }}{% endset %}
{% set element2 %}{{ lElements[j] }}{% endset %}

    public struct {{ element1 }}{{ element2 }} {

        let {{ element1|lowerFirstLetter }}: LayoutElement.Length
        let {{ element2|lowerFirstLetter }}: LayoutElement.Length

    }

{% endif %}
{% endfor %}
{% endfor %}

{# Size #}
// MARK: - Size

    public struct Size {

        let size: LayoutElement.Size

    }

{# 3-element Property #}
// MARK: - 3-element Property -
{# HorizontalHorizontalVertical #}
// MARK: - HorizontalHorizontalVertical
{% for i in 0...hElements.count %}
{% for j in i...hElements.count %}
{% for k in 0...vElements.count %}
{% if i < hElements.count and j < hElements.count and k < vElements.count and j > i %}
{% set element1 %}{{ hElements[i] }}{% endset %}
{% set element2 %}{{ hElements[j] }}{% endset %}
{% set element3 %}{{ vElements[k] }}{% endset %}

    public struct {{ element1 }}{{ element2 }}{{ element3 }} {

        let {{ element1|lowerFirstLetter }}: LayoutElement.Horizontal
        let {{ element2|lowerFirstLetter }}: LayoutElement.Horizontal
        let {{ element3|lowerFirstLetter }}: LayoutElement.Vertical

    }

{% endif %}
{% endfor %}
{% endfor %}
{% endfor %}

{# HorizontalHorizontalHeight #}
// MARK: - HorizontalHorizontalHeight
{% for i in 0...hElements.count %}
{% for j in i...hElements.count %}
{% if i < hElements.count and j < hElements.count and j > i %}
{% set element1 %}{{ hElements[i] }}{% endset %}
{% set element2 %}{{ hElements[j] }}{% endset %}
{% set element3 "Height" %}

    public struct {{ element1 }}{{ element2 }}{{ element3 }} {

        let {{ element1|lowerFirstLetter }}: LayoutElement.Horizontal
        let {{ element2|lowerFirstLetter }}: LayoutElement.Horizontal
        let {{ element3|lowerFirstLetter }}: LayoutElement.Length

    }

{% endif %}
{% endfor %}
{% endfor %}

{# HorizontalVerticalVertical #}
// MARK: - HorizontalVerticalVertical
{% for i in 0...hElements.count %}
{% for j in 0...vElements.count %}
{% for k in j...vElements.count %}
{% if i < hElements.count and j < vElements.count and k < vElements.count and k > j %}
{% set element1 %}{{ hElements[i] }}{% endset %}
{% set element2 %}{{ vElements[j] }}{% endset %}
{% set element3 %}{{ vElements[k] }}{% endset %}

    public struct {{ element1 }}{{ element2 }}{{ element3 }} {

        let {{ element1|lowerFirstLetter }}: LayoutElement.Horizontal
        let {{ element2|lowerFirstLetter }}: LayoutElement.Vertical
        let {{ element3|lowerFirstLetter }}: LayoutElement.Vertical

    }

{% endif %}
{% endfor %}
{% endfor %}
{% endfor %}

{# HorizontalLengthLength #}
// MARK: - HorizontalLengthLength
{% for i in 0...hElements.count %}
{% for j in 0...lElements.count %}
{% for k in j...lElements.count %}
{% if i < hElements.count and j < lElements.count and k < lElements.count and k > j %}
{% set element1 %}{{ hElements[i] }}{% endset %}
{% set element2 %}{{ lElements[j] }}{% endset %}
{% set element3 %}{{ lElements[k] }}{% endset %}

    public struct {{ element1 }}{{ element2 }}{{ element3 }} {

        let {{ element1|lowerFirstLetter }}: LayoutElement.Horizontal
        let {{ element2|lowerFirstLetter }}: LayoutElement.Length
        let {{ element3|lowerFirstLetter }}: LayoutElement.Length

    }

{% endif %}
{% endfor %}
{% endfor %}
{% endfor %}

{# HorizontalSize #}
// MARK: - HorizontalSize
{% for i in 0...hElements.count %}
{% if i < hElements.count %}
{% set element1 %}{{ hElements[i] }}{% endset %}
{% set element2 "Size" %}

    public struct {{ element1 }}{{ element2 }} {

        let {{ element1|lowerFirstLetter }}: LayoutElement.Horizontal
        let {{ element2|lowerFirstLetter }}: LayoutElement.Size

    }

{% endif %}
{% endfor %}

{# HorizontalVerticalLength #}
// MARK: - HorizontalVerticalLength
{% for i in 0...hElements.count %}
{% for j in 0...vElements.count %}
{% for k in 0...lElements.count %}
{% if i < hElements.count and j < vElements.count and k < lElements.count %}
{% set element1 %}{{ hElements[i] }}{% endset %}
{% set element2 %}{{ vElements[j] }}{% endset %}
{% set element3 %}{{ lElements[k] }}{% endset %}

    public struct {{ element1 }}{{ element2 }}{{ element3 }} {

        let {{ element1|lowerFirstLetter }}: LayoutElement.Horizontal
        let {{ element2|lowerFirstLetter }}: LayoutElement.Vertical
        let {{ element3|lowerFirstLetter }}: LayoutElement.Length

    }

{% endif %}
{% endfor %}
{% endfor %}
{% endfor %}

{# VerticalVerticalWidth #}
// MARK: - VerticalVerticalWidth
{% for i in 0...vElements.count %}
{% for j in i...vElements.count %}
{% if i < vElements.count and j < vElements.count and j > i %}
{% set element1 %}{{ vElements[i] }}{% endset %}
{% set element2 %}{{ vElements[j] }}{% endset %}
{% set element3 "Width" %}

    public struct {{ element1 }}{{ element2 }}{{ element3 }} {

        let {{ element1|lowerFirstLetter }}: LayoutElement.Vertical
        let {{ element2|lowerFirstLetter }}: LayoutElement.Vertical
        let {{ element3|lowerFirstLetter }}: LayoutElement.Length

    }

{% endif %}
{% endfor %}
{% endfor %}

{# VerticalLengthLength #}
// MARK: - VerticalLengthLength
{% for i in 0...vElements.count %}
{% for j in 0...lElements.count %}
{% for k in j...lElements.count %}
{% if i < vElements.count and j < lElements.count and k < lElements.count and k > j %}
{% set element1 %}{{ vElements[i] }}{% endset %}
{% set element2 %}{{ lElements[j] }}{% endset %}
{% set element3 %}{{ lElements[k] }}{% endset %}

    public struct {{ element1 }}{{ element2 }}{{ element3 }} {

        let {{ element1|lowerFirstLetter }}: LayoutElement.Vertical
        let {{ element2|lowerFirstLetter }}: LayoutElement.Length
        let {{ element3|lowerFirstLetter }}: LayoutElement.Length

    }

{% endif %}
{% endfor %}
{% endfor %}
{% endfor %}

{# VerticalSize #}
// MARK: - VerticalSize
{% for i in 0...vElements.count %}
{% if i < vElements.count %}
{% set element1 %}{{ vElements[i] }}{% endset %}
{% set element2 "Size" %}

    public struct {{ element1 }}{{ element2 }} {

        let {{ element1|lowerFirstLetter }}: LayoutElement.Vertical
        let {{ element2|lowerFirstLetter }}: LayoutElement.Size

    }

{% endif %}
{% endfor %}

{# VerticalHorizontalHorizontal (PointHorizontal) #}
// MARK: - VerticalHorizontalHorizontal (PointHorizontal)
{% for i in 0...vElements.count %}
{% for j in 0...hElements.count %}
{% for k in 0...hElements.count %}
{% if i < vElements.count and j < hElements.count and k < hElements.count and j != k %}
{% set element1 %}{{ vElements[i] }}{{hElements[j] }}{% endset %}
{% set element2 %}{{ hElements[k] }}{% endset %}

    public struct {{ element1 }}{{ element2 }} {

        let {{ element1|lowerFirstLetter }}: LayoutElement.Point
        let {{ element2|lowerFirstLetter }}: LayoutElement.Horizontal

    }

{% endif %}
{% endfor %}
{% endfor %}
{% endfor %}

{# VerticalHorizontalVertical (PointVertical) #}
// MARK: - VerticalHorizontalVertical (PointVertical)
{% for i in 0...vElements.count %}
{% for j in 0...hElements.count %}
{% for k in 0...vElements.count %}
{% if i < vElements.count and j < hElements.count and k < vElements.count and i != k %}
{% set element1 %}{{ vElements[i] }}{{hElements[j] }}{% endset %}
{% set element2 %}{{ vElements[k] }}{% endset %}

    public struct {{ element1 }}{{ element2 }} {

        let {{ element1|lowerFirstLetter }}: LayoutElement.Point
        let {{ element2|lowerFirstLetter }}: LayoutElement.Vertical

    }

{% endif %}
{% endfor %}
{% endfor %}
{% endfor %}

{# VerticalHorizontalLength (PointLength) #}
// MARK: - VerticalHorizontalLength (PointLength)
{% for i in 0...vElements.count %}
{% for j in 0...hElements.count %}
{% for k in 0...lElements.count %}
{% if i < vElements.count and j < hElements.count and k < lElements.count %}
{% set element1 %}{{ vElements[i] }}{{hElements[j] }}{% endset %}
{% set element2 %}{{ lElements[k] }}{% endset %}

    public struct {{ element1 }}{{ element2 }} {

        let {{ element1|lowerFirstLetter }}: LayoutElement.Point
        let {{ element2|lowerFirstLetter }}: LayoutElement.Length

    }

{% endif %}
{% endfor %}
{% endfor %}
{% endfor %}

}
